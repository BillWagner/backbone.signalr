{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Backbone.sync layer for SignalR","body":"backbone.signalr\r\n================\r\n\r\nWelcome to Backbone.SignalR, the sync layer for BackboneJS that lets you talk to a SignalR Server Hub.\r\n\r\n[Backbone.js ](http://backbonejs.org/) has a powerful model abstraction that allows you to synchronize your data with any data source (via Backbone.sync).  By default, Backbone models \"sync\" with REST services, but the Backbone.sync layer is replacable.  Backbone.signalr allows your models to \"sync\" with a real-time [SignalR](http://signalr.net/) hub very easily.  In addition, all models on all clients will get updated in real-time!\r\n\r\n# Getting Started #\r\nThere are two simple ways to use Backbone.SignalR:\r\n\r\n\r\n## Installing the Nuget Package ##\r\n\r\nYou can search for it with the name Backbone.SignalR or you can install it directly via the [Package Manager Console](http://docs.nuget.org/docs/start-here/using-the-package-manager-console):\r\n\r\n`PM> Install-Package Backbone.SignalR`\r\n\r\nThis will bring in the dependencies of SignalR and Backbone.js if you don't already have it.  It will put `backbone.signalr.js` in your **Scripts** folder and it will put `BackboneModelHub.cs` into your **Hubs** folder\r\n\r\n## Include the files manually ##\r\nIf you don't want to use the Nuget package, you can simply include the **client/backbone.signalr.js** file in your project and then copy **server/BackboneModelHub.cs** somewhere in your project and that is all you need.\r\n\r\n# Using the Backbone Model Hub #\r\n\r\nYou need to create a Model Hub in order to synchronize with the Backbone Frontend.  The base class handles the communication and updates, but you have control over how the data is managed.  Let's say, for instance, that you have a model called **Person**:\r\n\r\n```csharp\r\npublic class Person\r\n{\r\n    public string First { get; set; }\r\n    public string Last { get; set; }\r\n}\r\n```\r\n\r\nYou can create a **PersonHub** which stores models in a collection for demonstration.  Override the actions that you want to support:\r\n```csharp\r\npublic class PersonHub : BackboneModelHub<Person>\r\n{\r\n    private static readonly List<Person> people = new List<Person>();\r\n\r\n    protected override Person CreateModel(Person person)\r\n    {\r\n        person.Id = Guid.NewGuid();\r\n        people.Add(person);\r\n        return person;\r\n    }\r\n\r\n    protected override IEnumerable<Person> FindModels()\r\n    {\r\n        return people;\r\n    }\r\n}\r\n``` \r\n\r\nOf course, the actual mechanism to store and retrieve your data is up to you.  You might be talking to a service layer or an ORM.  The static list is just an example.\r\n\r\n**Important:** Note that the **PersonHub** is responsible for creating a unique identifier of some sort.  This might happen in your ORM, or you might add it here.  It is all up to you.\r\n\r\nMore overrides on the **BackboneModelHub** include:\r\n\r\n- UpdateModel\r\n- FindModel\r\n- DeleteModel\r\n\r\n```csharp\r\n    protected override Person UpdateModel(Person model)\r\n    {\r\n        var location = people.FindIndex(p => p.Id == model.Id);\r\n        if (location < 0) return model;\r\n\r\n        people[location] = model;\r\n        return model;\r\n    }\r\n\r\n    protected override Person FindModel(Person model)\r\n    {\r\n        return people.Find(p => p.Id == model.Id);\r\n    }\r\n\r\n    protected override Person DeleteModel(Person model)\r\n    {\r\n        var existing = people.Find(p => p.Id == model.Id);\r\n\r\n        if (existing == null) return null;\r\n\r\n        people.Remove(existing);\r\n        return existing;\r\n    }\r\n```\r\n\r\n# Using the Client-Side Sync Layer #\r\nYou will need to include SignalR, the Hubs, and **Backbone.signalr.js**\r\n\r\n```html\r\n<script src=\"~/Scripts/jquery.signalR-0.5.3.min.js\"></script>\r\n<script src=\"signalr/hubs\" type=\"text/javascript\"></script>\r\n<script src=\"~/Scripts/backbone.signalr.js\"></script>\r\n```\r\n\r\nThen, you can tell your collection to synchronize with the backend:\r\n\r\n```javascript\r\nvar Person = Backbone.Model.extend({});\r\nvar People = Backbone.Collection.extend({\r\n\tmodel: Person,\r\n\tsignalRHub: new Backbone.SignalR(\"personHub\")\r\n});\r\n```\r\n\r\nNow, after you start your SignalR connection, you can fetch, create, update and destroy data via SignalR:\r\n\r\n```javascript\r\nvar people = new People();\r\n\r\n$.connection.hub.start().done(function() {\r\n   people.fetch();\r\n});\r\n````\r\n\r\nIf you want it to listen to real-time changes that are pushed from the server, simply tell it to do so.  All clients who are listening will get model updates automatically:\r\n\r\n```javascript\r\ninitialize: function() {\r\n\tthis.signalRHub.syncUpdates(this);\r\n}\r\n```\r\n\r\n# Contributions #\r\n\r\nIf you can think of any way to make this integration better, please let me know.  I will consider all pull requests as wel as recommendations.  ","name":"Backbone.signalr","google":""}