{"body":"backbone.signalr\r\n================\r\n \r\nWelcome to Backbone.SignalR, the sync layer for BackboneJS that lets you talk to a SignalR Server Hub.\r\n\r\n\r\n[Backbone.js ](http://backbonejs.org/) has a powerful model abstraction that allows you to synchronize your data with any data source (via Backbone.sync).  By default, Backbone models \"sync\" with REST services, but the Backbone.sync layer is replacable.  Backbone.signalr allows your models to \"sync\" with a real-time [SignalR](http://signalr.net/) hub very easily.  In addition, all models on all clients will get updated in real-time!\r\n\r\nBackbone.SignalR works with SignalR 1.0.  Looking for SignalR 0.5 support?  We've tagged it for you: ([https://github.com/SrtSolutions/backbone.signalr/tags](https://github.com/SrtSolutions/backbone.signalr/tags \"Backbone.SignalR 0.5.0\"))\r\n\r\n# Getting Started #\r\nThere are two simple ways to use Backbone.SignalR:\r\n\r\n\r\n## Installing the Nuget Package ##\r\n\r\nYou can search for it with the name Backbone.SignalR (and include pre-release packages) or you can install it directly via the [Package Manager Console](http://docs.nuget.org/docs/start-here/using-the-package-manager-console):\r\n\r\n`PM> Install-Package Backbone.SignalR -Pre`\r\n\r\nThis will bring in the dependencies of SignalR and Backbone.js if you don't already have it.  It will put `backbone.signalr.js` in your **Scripts** folder and it will put `BackboneModelHub.cs` into your **Hubs** folder\r\n\r\n## Include the files manually ##\r\nIf you don't want to use the Nuget package, you can simply include the **client/backbone.signalr.js** file in your project and then copy **server/BackboneModelHub.cs** somewhere in your project and that is all you need.\r\n\r\n# Using the Backbone Model Hub #\r\n\r\nYou need to create a Model Hub in order to synchronize with the Backbone Frontend.  The base class handles the communication and updates, but you have control over how the data is managed.  Let's say, for instance, that you have a model called **Person**:\r\n\r\n```csharp\r\npublic class Person\r\n{\r\n    public int ID { get; set; }\r\n    public string First { get; set; }\r\n    public string Last { get; set; }\r\n}\r\n\r\npublic class PersonDBContext : DbContext\r\n{\r\n    public DbSet<Person> Person { get; set; }\r\n}\r\n```\r\n\r\nYou can create a **PersonHub** which stores models in a collection for demonstration.  Override the actions that you want to support:\r\n```csharp\r\npublic class PersonHub : BackboneModelHub<PersonHub, Person>\r\n{\r\n    private readonly PersonDBContext _db = new PersonDBContext();\r\n\r\n    protected override Person CreateModel(Person model)\r\n    {\r\n        _db.Person.Add(model);\r\n        _db.SaveChanges();\r\n\r\n        return model;\r\n    }\r\n\r\n    protected override IEnumerable<Person> FindModels()\r\n    {\r\n        return _db.Person.AsEnumerable();\r\n    }\r\n}\r\n``` \r\n\r\nOf course, the actual mechanism to store and retrieve your data is up to you.  You might be talking to a service layer or annother ORM.  This Entity Framework example is just to get you started.\r\n\r\n**Important:** The **PersonHub** is responsible for creating a unique identifier of some sort.  This might happen in your ORM, or you might add it here.  It is all up to you.\r\n\r\nMore overrides on the **BackboneModelHub** include:\r\n\r\n- UpdateModel\r\n- FindModel\r\n- DeleteModel\r\n\r\n```csharp\r\n    protected override Person FindModel(Person model)\r\n    {\r\n        return _db.Person.Find(model.ID);\r\n    }\r\n\r\n    protected override Person UpdateModel(Person model)\r\n    {\r\n        _db.Entry(model).State = EntityState.Modified;\r\n        _db.SaveChanges();\r\n        return model;\r\n    }\r\n\r\n    protected override Person DeleteModel(Person model)\r\n    {\r\n        Person person = _db.Person.Find(model.ID);\r\n        if (person == null)\r\n        {\r\n            return null;\r\n        }\r\n\r\n        _db.Person.Remove(person);\r\n        _db.SaveChanges();\r\n\r\n        return person;\r\n    }\r\n```\r\n\r\n# Using the Client-Side Sync Layer #\r\nYou will need to include SignalR (version to change as it progresses), the Hubs, and **Backbone.signalr.js**\r\n\r\n```html\r\n<script src=\"~/Scripts/jquery.signalR-1.0.0-alpha2.min.js\"></script>\r\n<script src=\"signalr/hubs\" type=\"text/javascript\"></script>\r\n<script src=\"~/Scripts/backbone.signalr.js\"></script>\r\n```\r\n\r\nThen, you can tell your collection to synchronize with the backend:\r\n\r\n```javascript\r\nvar Person = Backbone.Model.extend({});\r\nvar People = Backbone.Collection.extend({\r\n\tmodel: Person,\r\n\tsignalRHub: new Backbone.SignalR(\"personHub\")\r\n});\r\n```\r\n\r\nNow, after you start your SignalR connection, you can fetch, create, update and destroy data via SignalR:\r\n\r\n```javascript\r\nvar people = new People();\r\n\r\n$.connection.hub.start().done(function() {\r\n   people.fetch();\r\n});\r\n````\r\n\r\nIf you want it to listen to real-time changes that are pushed from the server, simply tell it to do so.  All clients who are listening will get model updates automatically:\r\n\r\n```javascript\r\ninitialize: function() {\r\n\tthis.signalRHub.syncUpdates(this);\r\n}\r\n```\r\n\r\n# Optional: Hybrid approach #\r\nIf you already have existing controller that you want to use and you don't want to duplicate your efforts in the hub, it is pretty easy.  This is a hybrid approach and allows you to maintain a standard REST api for traditional communication but allows your clients to synchronize changes when they happen.\r\n\r\nIn this case, you can create your hub without any persistence details:\r\n\r\n```csharp\r\npublic class PersonHub : BackboneModelHub<PersonHub, Person>\r\n{\r\n}\r\n```\r\n\r\nThe hub exposes several static methods that can be called from anywhere:\r\n\r\n- BroadcastModelCreated \r\n- BroadcastModelUpdated\r\n- BroadcastModelDestroyed\r\n- BroadcastCollectionReset\r\n\r\nThe last one (BroadcastCollectionReset) is used when your entire back-end collection has changed enough so that you want to tell all of the clients that they need to reset.  The synchronization on the client will call Collection.reset with the collection you send it.\r\n\r\nSo, imagine you have a WebAPI controller that manages people.  You just need to call the Hub's static methods:\r\n\r\n```csharp\r\npublic class PersonController : ApiController\r\n{\r\n    private readonly PersonDBContext _db = new PersonDBContext();\r\n\r\n    public IEnumerable<Person> GetPeople()\r\n    {\r\n        return _db.Person.AsEnumerable();\r\n    }\r\n\r\n    public Person GetPerson(int id)\r\n    {\r\n        return _db.Person.Find(id);\r\n    }\r\n\r\n    public Person PutPerson(int id, Person person)\r\n    {\r\n        _db.Entry(person).State = EntityState.Modified;\r\n        _db.SaveChanges();\r\n            \r\n        PersonHub.BroadcastModelUpdated(person);\r\n            \r\n        return person;\r\n    }\r\n\r\n    public Person PostPerson(Person person)\r\n    {\r\n        _db.Person.Add(person);\r\n        _db.SaveChanges();\r\n\r\n        PersonHub.BroadcastModelCreated(person);\r\n\r\n        return person;\r\n    }\r\n\r\n    public Person DeletePerson(int id)\r\n    {\r\n        Person person = _db.Person.Find(id);\r\n        if (person == null)\r\n        {\r\n            return null;\r\n        }\r\n\r\n        _db.Person.Remove(person);\r\n        _db.SaveChanges();\r\n                \r\n        PersonHub.BroadcastModelDestroyed(person);\r\n\r\n        return person;\r\n    }\r\n\r\n    protected override void Dispose(bool disposing)\r\n    {\r\n        _db.Dispose();\r\n        base.Dispose(disposing);\r\n    }\r\n}\r\n```\r\n\r\nThe Client-side javascript collection would synchronize with the REST service like it normally would:\r\n\r\n```javascript\r\nvar Person = Backbone.Model.extend({});\r\nvar People = Backbone.Collection.extend({\r\n\tmodel: Person,\r\n\turl: \"/api/person\"\r\n});\r\n```\r\n\r\nBut when you create your collection, you sync updates that come from SignalR:\r\n\r\n```javascript\r\nvar people = new People();\r\nnew Backbone.SignalR(\"personHub\").syncUpdates(people);\r\npeople.fetch();\r\n\r\n$.connection.hub.start();\r\n```\r\n\r\n# Contributions #\r\n\r\nIf you can think of any way to make this integration better, please let me know.  I will consider all pull requests as wel as recommendations.  \r\n","name":"Backbone.signalr","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Backbone.sync layer for SignalR","google":""}